# Define variables
variables:
  TEST_RESULTS_FILE: test-results.xml

# Define is_tag rule
.is_tag: &is_tag
  if: '$CI_COMMIT_TAG'
  when: always

# Define stages
stages:
  - test
  - publish

# Run BATS tests (always)
bats_tests:
  stage: test
  image:
    name: bats/bats:latest
    entrypoint: [ "" ]
  script:
    - bats --formatter junit "$PWD/tests" > $TEST_RESULTS_FILE
  artifacts:
    when: always
    paths:
      - $PWD/$TEST_RESULTS_FILE
    reports:
      junit: $PWD/$TEST_RESULTS_FILE

# Publish tag (only if tag is being created)
publish_tag:
  stage: publish
  rules:
    - <<: *is_tag
  image:
    name: alpine/git:latest
    entrypoint: [ "" ]
  script:
    # Set git user
    - git config user.name "$CI_USER"
    - git config user.email "$CI_USER_EMAIL"
    # Set remote
    - git remote set-url origin "https://${CI_USER}:${CI_USER_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    # Create temporary branch; this is necessary to replace SCRIPT_VERSION with the tag and commit it
    - git show-ref --verify --quiet refs/heads/temp-branch && git branch -D temp-branch || true
    - git checkout -b temp-branch
    # Replace SCRIPT_VERSION with $CI_COMMIT_TAG
    - |
      for script in scripts/*.sh; do
        sed -i -E "s/(export SCRIPT_VERSION=\")([^\"]+)(\".*)/\1${CI_COMMIT_TAG}\3/" "$script"
      done
    # Add and commit the changes, update $CI_COMMIT_TAG tag
    - git add scripts/*.sh
    - git commit -m "Application version '$CI_COMMIT_TAG' [ci skip]"
    - git tag -d $CI_COMMIT_TAG || true  # Delete $CI_COMMIT_TAG tag locally
    - git push origin :refs/tags/$CI_COMMIT_TAG  # Delete $CI_COMMIT_TAG tag in origin, too
    - git tag -a $CI_COMMIT_TAG -m "Tagging version $CI_COMMIT_TAG [ci skip]" # Create updated $CI_COMMIT_TAG tag locally
    - git push origin $CI_COMMIT_TAG # Push updated $CI_COMMIT_TAG to remote
    # Fetch all branches, change to master and delete the temporary branch
    - git fetch
    - |
      if git rev-parse --verify $CI_DEFAULT_BRANCH >/dev/null 2>&1; then
        # If the branch exists locally
        git checkout $CI_DEFAULT_BRANCH
        git reset --hard origin/$CI_DEFAULT_BRANCH  # Reset the local branch to match origin/branch
      else
        # If the branch does not exist locally
        git checkout -b $CI_DEFAULT_BRANCH origin/$CI_DEFAULT_BRANCH  # Create branch based on origin/branch
      fi
    - git branch -D temp-branch
